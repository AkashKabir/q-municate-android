apply plugin: 'android'

dependencies {
    compile fileTree(dir: "$buildDir/native-libs", include: 'native-libs.jar')
    compile fileTree(dir: 'libs', include: '*.jar')
    compile project(':facebook')
    compile "com.nostra13.universalimageloader:universal-image-loader:${rootProject.universalImageLoaderVersion}"
    compile "com.google.android.gms:play-services:${rootProject.googlePlayServicesVersion}"
    compile "com.nineoldandroids:library:${rootProject.nineoldandroidsVersion}"
    compile "de.keyboardsurfer.android.widget:crouton:${rootProject.croutonVersion}"
    compile 'com.github.chrisbanes.actionbarpulltorefresh:library:+'
}

task nativeLibsToJar(type: Zip, description: 'create a jar archive of the native libs') {
    destinationDir file("$buildDir/native-libs")
    baseName 'native-libs'
    extension 'jar'
    from fileTree(dir: 'libs', include: '**/*.so')
    into 'lib/'
}

tasks.withType(Compile) {
    compileTask -> compileTask.dependsOn(nativeLibsToJar)
}

android {
    compileSdkVersion 19
    buildToolsVersion '19.1.0'
    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 19
        versionCode rootProject.versionCode
        versionName rootProject.versionName
    }
    signingConfigs {
        debug {
            storeFile file('../cert/debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            storeFile file('../cert/release.keystore')
            storePassword ''
            keyAlias ''
            keyPassword ''
        }
    }
    buildTypes {
        debug {
            debuggable rootProject.devDebug
            signingConfig signingConfigs.debug
            zipAlign true
        }
        release {
            debuggable rootProject.prodDebug
            signingConfig signingConfigs.release
            runProguard false
            proguardFile 'proguard.cfg'
            proguardFile getDefaultProguardFile('proguard-rules.txt')
            resValue "string", "lgn_default_user_email", ""
            resValue "string", "lgn_default_user_password", ""
        }
    }
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
    lintOptions {
        abortOnError false
    }
    productFlavors {
    }
}